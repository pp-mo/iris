# Please update the test data git references below if appropriate.
#
# Note: Contrary to the travis documentation,
# http://about.travis-ci.org/docs/user/languages/python/#Travis-CI-Uses-Isolated-virtualenvs
# we will use conda to give us a much faster setup time.


language: python
python:
  - 2.7
  - 3.4
sudo: false

env:
  - TEST_TARGET=default
  - TEST_TARGET=default TEST_MINIMAL=true
  - TEST_TARGET=coding

git:
  depth: 10000

install:
  - export IRIS_TEST_DATA_REF="942e6344d6e6d00c85d824dadd49b5d6f57f4b4a"
  - export IRIS_TEST_DATA_SUFFIX=$(echo "${IRIS_TEST_DATA_REF}" | sed "s/^v//")

  # Install miniconda
  # -----------------
  - export CONDA_BASE=https://repo.continuum.io/miniconda/Miniconda
  - if [[ "$TRAVIS_PYTHON_VERSION" == 2* ]]; then
      wget ${CONDA_BASE}2-latest-Linux-x86_64.sh -O miniconda.sh;
    else
      wget ${CONDA_BASE}3-latest-Linux-x86_64.sh -O miniconda.sh;
    fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"

  # Create the basic testing environment
  # ------------------------------------
  # Explicitly add defaults channel, see https://github.com/conda/conda/issues/2675
  - conda config --add channels defaults
  - conda config --set always_yes yes --set changeps1 no
  - conda config --set show_channel_urls True
  - conda update --quiet conda
  - ENV_NAME='test-environment'
  - conda create --quiet -n $ENV_NAME python=$TRAVIS_PYTHON_VERSION
  - source activate $ENV_NAME

  # Customise the testing environment
  # ---------------------------------
  - conda config --add channels scitools
  - if [[ "$TEST_MINIMAL" == true ]]; then
      conda install --quiet --file minimal-conda-requirements.txt;
    else
      if [[ "$TRAVIS_PYTHON_VERSION" == 3* ]]; then
        sed -e '/ecmwf_grib/d' -e '/esmpy/d' -e '/iris_grib/d' -e 's/#.\+$//' conda-requirements.txt | xargs conda install --quiet;
      else
        conda install --quiet --file conda-requirements.txt;
      fi
    fi

  - PREFIX=$HOME/miniconda/envs/$ENV_NAME

  # Output debug info
  - conda list
  - conda info -a

# Pre-load Natural Earth data to avoid multiple, overlapping downloads.
# i.e. There should be no DownloadWarning reports in the log.
  - python -c 'import cartopy; cartopy.io.shapereader.natural_earth()'

# iris test data
  - if [[ "$TEST_MINIMAL" != true ]]; then
      wget -O iris-test-data.zip https://github.com/SciTools/iris-test-data/archive/${IRIS_TEST_DATA_REF}.zip;
      unzip -q iris-test-data.zip;
      ln -s $(pwd)/iris-test-data-${IRIS_TEST_DATA_SUFFIX} iris-test-data;
    fi

# prepare iris build directory
  - python setup.py --with-unpack build_ext --include-dirs=${PREFIX}/include --library-dirs=${PREFIX}/lib
  - if [[ $TEST_TARGET -ne 'coding' ]]; then
      IRIS=$(ls -d1 build/lib*/iris);
      mkdir $IRIS/etc;
    else
      IRIS=lib/iris;
    fi

# set config paths
  - SITE_CFG=$IRIS/etc/site.cfg
  - echo "[Resources]" > $SITE_CFG
  - echo "test_data_dir = $(pwd)/iris-test-data/test_data" >> $SITE_CFG
  - echo "doc_dir = $(pwd)/docs/iris" >> $SITE_CFG
  - echo "[System]" >> $SITE_CFG
  - echo "udunits2_path = $PREFIX/lib/libudunits2.so" >> $SITE_CFG

  # The coding standards tests expect all the standard names and PyKE
  # modules to be present.
  - if [[ $TEST_TARGET == 'coding' ]]; then
      python setup.py std_names;
      PYTHONPATH=lib python setup.py pyke_rules;
    fi

# iris
  - python setup.py --quiet --with-unpack build
  - python setup.py --quiet --with-unpack install

script:
  - if [[ $TEST_TARGET == 'default' ]]; then
      python -m iris.tests.runner --default-tests --system-tests --print-failed-images;
    fi
  - if [[ $TEST_TARGET == 'example' ]]; then
      python -m iris.tests.runner --example-tests --print-failed-images;
    fi
  # "make html" produces an error when run on Travis that does not
  # affect any downstream functionality but causes the build to fail
  # spuriously. The echo-backtick workaround gets around this error,
  # which should be investigated further in the future.
  - if [[ $TEST_TARGET == 'doctest' ]]; then
      cd $(pwd)/docs/iris;
      echo `make clean html`;
      make doctest;
    fi
  # An extra call to check "whatsnew" contributions are valid, because the
  # Iris test for it needs a *developer* install to be able to find the docs.
  - if [[ $TEST_TARGET == 'doctest' ]]; then
      cd ./src/whatsnew;
      python aggregate_directory.py --checkonly;
    fi
  - if [[ $TEST_TARGET == 'coding' ]]; then
      python setup.py test --coding-tests;
    fi
